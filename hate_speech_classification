def hatespeech_classify(message):
    with open('hate_speech_classifier.pkl', 'rb') as f:
        clf = pickle.load(f)
    with open('vectorizers.pkl', 'rb') as f:
        text_vectorizer, pos_vectorizer = pickle.load(f)
    X_test = preprocess_data([message], text_vectorizer, pos_vectorizer)
    predicted_Y = clf.predict(X_test)
    if predicted_Y[0] == 0:
        print("Hate Speech")
    elif predicted_Y[0] == 1:
        print("Offensive Speech")
    else:
        print("Neutral Speech")
        
def main():
    if path.isfile('hate_speech_classifier.pkl'):
        print("Loading trained classifier")
        with open('hate_speech_classifier.pkl', 'rb') as f:
            clf = pickle.load(f)
    else:
        print("Training classifier")
        labeled_data = pd.DataFrame(pd.read_csv("labeled_data.csv"))
        tweets = labeled_data["tweet"].astype("string")
        labels = labeled_data["class"].astype("int16")
        X_train = preprocess_data(tweets, None, None)
        Y_train = np.array(labels)

        # Parameter Grid for Grid Search
        # params = {'class_weight': ['balanced'],
        #           'bootstrap': [True, False],
        #           'max_depth': [10, 50, 100, 200],
        #           'max_features': ['auto', 'sqrt'],
        #           'min_samples_leaf': [1, 2, 5, 10],
        #           'min_samples_split': [2, 5, 10, 20],
        #           'n_estimators': [100, 200, 500, 1000, 2000]}

        clf = RandomForestClassifier()
        best_params = {'n_estimators': 2000, 'min_samples_split': 2, 'min_samples_leaf': 2, 'max_features': 'sqrt',
                       'max_depth': 100, 'class_weight': 'balanced', 'bootstrap': True}
        clf.set_params(**best_params)

        # Grid Search
        # randomized_search = RandomizedSearchCV(clf, scoring='f1_macro', n_jobs=-1)
        # search = randomized_search.fit(X_train, Y_train)
        # print(search.best_params_)

        clf.fit(X_train, Y_train)
        with open('hate_speech_classifier.pkl', 'wb') as f:
            pickle.dump(clf, f)
        print("Classifier saved successfully")
